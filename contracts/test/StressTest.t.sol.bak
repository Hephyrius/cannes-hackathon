// SPDX-License-Identifier: MIT
pragma solidity ^0.8.25;

import {Test} from "forge-std/Test.sol";
import {console} from "forge-std/console.sol";
import {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import {SimplePredictionMarket} from "../src/SimplePredictionMarket.sol";
import {SimpleMarketFactory} from "../src/SimpleMarketFactory.sol";

contract MockUSDC is ERC20 {
    constructor() ERC20("Mock USDC", "USDC") {
        _mint(msg.sender, 1000000 * 10**6);
    }
    
    function mint(address to, uint256 amount) external {
        _mint(to, amount);
    }
    
    function decimals() public pure override returns (uint8) {
        return 6;
    }
}

contract StressTest is Test {
    SimplePredictionMarket market;
    SimpleMarketFactory factory;
    MockUSDC usdc;
    
    // Stress test parameters
    uint256 constant NUM_USERS = 100;
    uint256 constant NUM_LPS = 20;
    uint256 constant NUM_TRADERS = 80;
    
    address[] users;
    address[] lps;
    address[] traders;
    
    // Metrics tracking
    uint256 totalGasUsed;
    uint256 totalVolumeTraded;
    uint256 totalLiquiditySeeded;
    uint256 numTrades;
    uint256 maxGasPerTx;
    uint256 minGasPerTx = type(uint256).max;
    
    function setUp() public {
        console.log("=== STRESS TEST SETUP ===");
        
        // Deploy contracts
        usdc = new MockUSDC();
        factory = new SimpleMarketFactory(address(usdc));
        market = SimplePredictionMarket(factory.createMarket("Will AI achieve AGI by 2030?"));
        
        console.log("Factory deployed at:", address(factory));
        console.log("Market deployed at:", address(market));
        console.log("Question:", market.question());
        
        // Create user accounts
        _createUsers();
        _setupUserBalances();
        
        console.log("Created", NUM_USERS, "user accounts");
        console.log("LPs:", NUM_LPS);
        console.log("Traders:", NUM_TRADERS);
        console.log("Setup complete!\n");
    }
    
    function test_StressTestFullMarketCycle() public {
        console.log("=== STARTING COMPREHENSIVE STRESS TEST ===");
        console.log("Simulating", NUM_USERS, "users interacting with the market\n");
        
        // Phase 1: Mass Seeding
        _runSeedingPhase();
        
        // Phase 2: Criteria Proposal and Voting
        _runVotingPhase();
        
        // Phase 3: Mass Trading
        _runTradingPhase();
        
        // Final metrics report
        _reportFinalMetrics();
    }
    
    function test_StressTestConcurrentMarkets() public {
        console.log("=== STRESS TEST: MULTIPLE CONCURRENT MARKETS ===");
        
        address[] memory markets = new address[](10);
        
        // Create 10 markets
        for (uint256 i = 0; i < 10; i++) {
            string memory question = string(abi.encodePacked("Market ", vm.toString(i + 1), " question"));
            markets[i] = factory.createMarket(question);
            console.log("Created market", i + 1, "at:", markets[i]);
        }
        
        // Distribute users across markets
        for (uint256 i = 0; i < NUM_LPS; i++) {
            uint256 marketIndex = i % 10;
            SimplePredictionMarket targetMarket = SimplePredictionMarket(markets[marketIndex]);
            
            vm.prank(lps[i]);
            usdc.approve(markets[marketIndex], type(uint256).max);
            
            uint256 seedAmount = (1000 + (i * 100)) * 1e6; // Varying amounts
            vm.prank(lps[i]);
            targetMarket.seedLiquidity(seedAmount);
        }
        
        console.log("Distributed liquidity across 10 markets");
        console.log("Factory now has", factory.getMarketCount(), "markets");
    }
    
    function _createUsers() internal {
        users = new address[](NUM_USERS);
        lps = new address[](NUM_LPS);
        traders = new address[](NUM_TRADERS);
        
        // Create LPs
        for (uint256 i = 0; i < NUM_LPS; i++) {
            address user = makeAddr(string(abi.encodePacked("lp", vm.toString(i))));
            users[i] = user;
            lps[i] = user;
        }
        
        // Create traders
        for (uint256 i = 0; i < NUM_TRADERS; i++) {
            address user = makeAddr(string(abi.encodePacked("trader", vm.toString(i))));
            users[NUM_LPS + i] = user;
            traders[i] = user;
        }
    }
    
    function _setupUserBalances() internal {
        for (uint256 i = 0; i < NUM_USERS; i++) {
            // Give varying amounts to simulate realistic distribution
            uint256 balance;
            if (i < NUM_LPS) {
                balance = (10000 + (i * 1000)) * 1e6; // LPs get more (10k-30k USDC)
            } else {
                balance = (1000 + (i * 100)) * 1e6; // Traders get less (1k-10k USDC)
            }
            
            usdc.mint(users[i], balance);
            
            vm.prank(users[i]);
            usdc.approve(address(market), type(uint256).max);
        }
    }
    
    function _runSeedingPhase() internal {
        console.log("=== PHASE 1: MASS SEEDING ===");
        
        uint256 phaseStartGas = gasleft();
        
        for (uint256 i = 0; i < NUM_LPS; i++) {
            uint256 gasStart = gasleft();
            
            // Varying seed amounts based on LP index
            uint256 seedAmount = (1000 + (i * 200)) * 1e6; // 1k to 5k USDC
            
            vm.prank(lps[i]);
            market.seedLiquidity(seedAmount);
            
            uint256 gasUsed = gasStart - gasleft();
            _updateGasMetrics(gasUsed);
            
            totalLiquiditySeeded += seedAmount;
            
            if (i % 5 == 0) {
                console.log("LP", i + 1, "seeded", seedAmount / 1e6, "USDC, Gas:", gasUsed);
            }
        }
        
        uint256 phaseGasUsed = phaseStartGas - gasleft();
        console.log("\nSeeding Phase Complete:");
        console.log("- Total liquidity seeded:", totalLiquiditySeeded / 1e6, "USDC");
        console.log("- Phase gas used:", phaseGasUsed);
        console.log("- Avg gas per seed:", phaseGasUsed / NUM_LPS);
        
        // Check token reserves
        (uint256 yesPrice, uint256 noPrice) = market.getTokenPrices();
        console.log("- Initial YES price:", yesPrice);
        console.log("- Initial NO price:", noPrice);
        console.log("");
    }
    
    function _runVotingPhase() internal {
        console.log("=== PHASE 2: CRITERIA VOTING ===");
        
        // Fast forward to voting phase
        vm.warp(block.timestamp + 2 hours + 1);
        market.startVoting();
        
        console.log("Voting phase started");
        
        // LPs propose criteria (first 10 LPs)
        string[] memory criteriaOptions = new string[](10);
        criteriaOptions[0] = "OpenAI official AGI announcement";
        criteriaOptions[1] = "Google DeepMind AGI declaration";
        criteriaOptions[2] = "Meta AI AGI achievement";
        criteriaOptions[3] = "Anthropic AGI milestone";
        criteriaOptions[4] = "Academic consensus on AGI";
        criteriaOptions[5] = "Government AGI recognition";
        criteriaOptions[6] = "Industry AGI standard";
        criteriaOptions[7] = "AGI benchmark completion";
        criteriaOptions[8] = "AGI Turing test passage";
        criteriaOptions[9] = "AGI economic impact threshold";
        
        uint256 proposalGas = 0;
        for (uint256 i = 0; i < 10 && i < NUM_LPS; i++) {
            uint256 gasStart = gasleft();
            vm.prank(lps[i]);
            market.proposeCriteria(criteriaOptions[i]);
            proposalGas += gasStart - gasleft();
        }
        
        console.log("10 criteria proposed, total gas:", proposalGas);
        
        // All LPs vote (weighted voting)
        uint256 votingGas = 0;
        for (uint256 i = 0; i < NUM_LPS; i++) {
            uint256 gasStart = gasleft();
            uint256 criteriaIndex = i % 10; // Distribute votes across criteria
            vm.prank(lps[i]);
            market.voteOnCriteria(criteriaOptions[criteriaIndex]);
            votingGas += gasStart - gasleft();
        }
        
        console.log("All", NUM_LPS, "LPs voted, total gas:", votingGas);
        
        // Report voting results
        for (uint256 i = 0; i < 10; i++) {
            uint256 votes = market.getCriteriaVotes(criteriaOptions[i]);
            if (votes > 0) {
                console.log("Criteria", i + 1, "votes:", votes / 1e6, "USDC weight");
            }
        }
        console.log("");
    }
    
    function _runTradingPhase() internal {
        console.log("=== PHASE 3: MASS TRADING ===");
        
        // Fast forward to trading phase
        vm.warp(block.timestamp + 1 hours + 1);
        market.startTrading();
        
        console.log("Trading phase started");
        console.log("Winning criteria:", market.resolutionCriteria());
        
        uint256 phaseStartGas = gasleft();
        
        // Simulate realistic trading patterns
        for (uint256 round = 0; round < 5; round++) {
            console.log("\n--- Trading Round", round + 1, "---");
            
            _simulateTradingRound(round);
            
            // Report market state after each round
            (uint256 yesPrice, uint256 noPrice) = market.getTokenPrices();
            console.log("YES price:", yesPrice, "NO price:", noPrice);
            console.log("Total trades so far:", numTrades);
            console.log("Total volume:", totalVolumeTraded / 1e6, "USDC");
        }
        
        uint256 phaseGasUsed = phaseStartGas - gasleft();
        console.log("\nTrading Phase Complete:");
        console.log("- Total trades:", numTrades);
        console.log("- Total volume:", totalVolumeTraded / 1e6, "USDC");
        console.log("- Phase gas used:", phaseGasUsed);
        console.log("- Avg gas per trade:", numTrades > 0 ? phaseGasUsed / numTrades : 0);
    }
    
    function _simulateTradingRound(uint256 round) internal {
        uint256 roundTrades = 0;
        uint256 roundVolume = 0;
        
        // Each round has different trading intensity
        uint256 activeTraders = 20 + (round * 10); // 20, 30, 40, 50, 60 traders per round
        if (activeTraders > NUM_TRADERS) activeTraders = NUM_TRADERS;
        
        for (uint256 i = 0; i < activeTraders; i++) {
            // Simulate different trading behaviors
            bool buyYes = _shouldBuyYes(i, round);
            uint256 tradeAmount = _calculateTradeAmount(i, round);
            
            uint256 gasStart = gasleft();
            
            if (buyYes) {
                vm.prank(traders[i]);
                market.buyYes(tradeAmount);
            } else {
                vm.prank(traders[i]);
                market.buyNo(tradeAmount);
            }
            
            uint256 gasUsed = gasStart - gasleft();
            _updateGasMetrics(gasUsed);
            
            roundTrades++;
            roundVolume += tradeAmount;
        }
        
        numTrades += roundTrades;
        totalVolumeTraded += roundVolume;
        
        console.log("Round trades:", roundTrades, "Volume:", roundVolume / 1e6, "USDC");
    }
    
    function _shouldBuyYes(uint256 traderIndex, uint256 round) internal pure returns (bool) {
        // Simulate market sentiment shifts across rounds
        uint256 sentiment = (traderIndex + round * 17) % 100;
        
        if (round == 0) return sentiment > 50; // Initial balance
        if (round == 1) return sentiment > 30; // YES optimism
        if (round == 2) return sentiment > 70; // NO pessimism
        if (round == 3) return sentiment > 40; // YES recovery
        return sentiment > 55; // Final balance
    }
    
    function _calculateTradeAmount(uint256 traderIndex, uint256 round) internal pure returns (uint256) {
        // Varying trade sizes: small, medium, large traders
        uint256 baseAmount = 50 * 1e6; // 50 USDC base
        uint256 multiplier = 1 + (traderIndex % 10); // 1x to 10x
        uint256 roundBonus = round * 20 * 1e6; // Increasing activity
        
        return baseAmount * multiplier + roundBonus;
    }
    
    function _updateGasMetrics(uint256 gasUsed) internal {
        totalGasUsed += gasUsed;
        if (gasUsed > maxGasPerTx) maxGasPerTx = gasUsed;
        if (gasUsed < minGasPerTx) minGasPerTx = gasUsed;
    }
    
    function _reportFinalMetrics() internal {
        console.log("\n=== FINAL STRESS TEST METRICS ===");
        
        // Market state
        (uint256 finalYesPrice, uint256 finalNoPrice) = market.getTokenPrices();
        console.log("Final YES price:", finalYesPrice);
        console.log("Final NO price:", finalNoPrice);
        
        // Volume metrics
        console.log("Total liquidity seeded:", totalLiquiditySeeded / 1e6, "USDC");
        console.log("Total volume traded:", totalVolumeTraded / 1e6, "USDC");
        console.log("Total number of trades:", numTrades);
        console.log("Average trade size:", numTrades > 0 ? (totalVolumeTraded / numTrades) / 1e6 : 0, "USDC");
        
        // Gas metrics
        console.log("Total gas consumed:", totalGasUsed);
        console.log("Average gas per transaction:", totalGasUsed / (NUM_LPS + numTrades + 10)); // +10 for proposals
        console.log("Max gas per transaction:", maxGasPerTx);
        console.log("Min gas per transaction:", minGasPerTx);
        
        // Market efficiency
        uint256 priceImpact = finalYesPrice > 500000 ? finalYesPrice - 500000 : 500000 - finalYesPrice;
        console.log("Price impact from 50/50:", priceImpact);
        
        // User distribution
        console.log("Number of LPs:", NUM_LPS);
        console.log("Number of traders:", NUM_TRADERS);
        console.log("Total participants:", NUM_USERS);
        
        // System performance summary
        console.log("\n=== PERFORMANCE SUMMARY ===");
        console.log("SUCCESS: System handled", NUM_USERS, "concurrent users");
        console.log("SUCCESS: Processed", numTrades, "trades successfully");
        console.log("SUCCESS: Managed", totalLiquiditySeeded / 1e6, "USDC in liquidity");
        console.log("SUCCESS: No reverts or failures detected");
        console.log("SUCCESS: Gas usage within acceptable ranges");
        
        if (totalVolumeTraded > totalLiquiditySeeded / 2) {
            console.log("SUCCESS: High market activity - healthy trading volume");
        }
        
        if (maxGasPerTx < 500000) {
            console.log("SUCCESS: Efficient gas usage - all transactions under 500k gas");
        }
        
        console.log("\n=== STRESS TEST COMPLETED SUCCESSFULLY ===");
    }
} 